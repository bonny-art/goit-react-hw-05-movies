{"version":3,"file":"static/js/884.0c4b3d46.chunk.js","mappings":"oPA4CA,UAtCqB,WACnB,IAAAA,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,CAAC,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACdG,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OArBAE,EAAAA,EAAAA,YAAU,WACRP,GAAa,GACbJ,EAAS,IACT,IAAMY,EAAO,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEOC,EAAAA,EAAAA,IAAgBZ,GAAS,KAAD,EAArCQ,EAAIC,EAAAI,KACVd,EAASS,GAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEflB,EAASkB,EAAAK,GAAMC,SAAS,QAEJ,OAFIN,EAAAC,KAAA,GAExBf,GAAa,GAAOc,EAAAO,OAAA,6BAAAP,EAAAQ,OAAA,GAAAV,EAAA,wBAEvB,kBATY,OAAAH,EAAAc,MAAA,KAAAC,UAAA,KAWbhB,GACF,GAAG,CAACH,KAEJE,EAAAA,EAAAA,YAAU,WAEV,GAAG,CAACF,KAGFoB,EAAAA,EAAAA,KAACC,EAAAA,GAAa,CAAAC,UACZC,EAAAA,EAAAA,MAACC,EAAAA,GAAe,CAAAF,SAAA,CACb5B,IAAa0B,EAAAA,EAAAA,KAACK,EAAAA,GAAM,IACpBnC,IAAS8B,EAAAA,EAAAA,KAACM,EAAAA,GAAO,CAAAJ,SAAEhC,KACpB8B,EAAAA,EAAAA,KAACO,EAAAA,GAAS,CAAC7B,MAAOA,QAI1B,C","sources":["pages/MovieDetails.jsx"],"sourcesContent":["import { Loader, Message, MovieInfo } from 'components';\nimport { ContainerStyled, SectionStyled } from 'components/App/App.styled';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'service/movies-service';\n\nconst MovieDetails = () => {\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState({});\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError('');\n    const getData = async () => {\n      try {\n        const resp = await getMovieDetails(movieId);\n        setMovie(resp);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getData();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!movieId) return;\n  }, [movieId]);\n\n  return (\n    <SectionStyled>\n      <ContainerStyled>\n        {isLoading && <Loader />}\n        {error && <Message>{error}</Message>}\n        <MovieInfo movie={movie} />\n      </ContainerStyled>\n    </SectionStyled>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","movie","setMovie","movieId","useParams","useEffect","getData","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","resp","_context","prev","next","getMovieDetails","sent","t0","message","finish","stop","apply","arguments","_jsx","SectionStyled","children","_jsxs","ContainerStyled","Loader","Message","MovieInfo"],"sourceRoot":""}